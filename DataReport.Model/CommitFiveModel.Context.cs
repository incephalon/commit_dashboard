//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataReport.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;

    public partial class CommitFiveEntities : DbContext, ICommitFiveContext
    {
        public CommitFiveEntities()
            : base("name=CommitFiveEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<campusReference> CampusReference { get; set; }
        public virtual DbSet<college> College { get; set; }
        public virtual DbSet<mytable> Mytable { get; set; }
        public virtual DbSet<noner> Noner { get; set; }
        public virtual DbSet<staff> Staff { get; set; }
        public virtual DbSet<student> Student { get; set; }

        public System.Data.Entity.Infrastructure.DbEntityEntry UpdateEntries(object dbEntity, object entity)
        {
            var entry = Entry(dbEntity);
            entry.OriginalValues.SetValues(dbEntity);
            entry.CurrentValues.SetValues(entity);
            return entry;
        }

        public new IDbSet<T> Set<T>() where T : class
        {
            return base.Set<T>();
        }

        public new System.Data.Entity.Infrastructure.DbEntityEntry Entry<T>(T entity) where T : class
        {
            return base.Entry<T>(entity);
        }

        public int ExecuteSqlCommand(string sql, params object[] parameters)
        {
            return Database.ExecuteSqlCommand(sql, parameters);
        }

        public void DetectChanges()
        {
            ChangeTracker.DetectChanges();
        }

        public new void SaveChanges()
        {
            base.SaveChanges();
        }
        public void SetUnchanged(object entity)
        {
            Entry(entity).State = EntityState.Unchanged;
        }

        public bool IsAttached(object entity)
        {
            return Entry(entity).State == EntityState.Detached;
        }
    }
}
